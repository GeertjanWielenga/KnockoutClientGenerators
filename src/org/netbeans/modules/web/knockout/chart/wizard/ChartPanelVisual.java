package org.netbeans.modules.web.knockout.chart.wizard;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.AbstractButton;
import javax.swing.JPanel;
import org.netbeans.spi.project.ui.templates.support.Templates;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileObject;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;

public final class ChartPanelVisual extends JPanel {

    private static String REST_CLIENT = "RestClient";               // NOI18N
    private static String JS = ".js";                      // NOI18N

    @NbBundle.Messages("ChartPanelVisual.name=Select Chart Type")
    public ChartPanelVisual(ChartPanel panel) {
        myPanel = panel;
        initComponents();

        ActionListener chartActionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                AbstractButton aButton = (AbstractButton) actionEvent.getSource();
                chartDescriptionLabel.setText("Details about " + aButton.getName());
            }
        };

        areaChartButton.addActionListener(chartActionListener);
        barChartButton.addActionListener(chartActionListener);
        bubbleChartButton.addActionListener(chartActionListener);
        combinationChartButton.addActionListener(chartActionListener);

        String jsName = suggestJsName(panel.getDescriptor());
        Templates.setTargetName(panel.getDescriptor(), jsName);
    }

    @Override
    public String getName() {
        return Bundle.ChartPanelVisual_name();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        chartButtonGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        areaChartButton = new javax.swing.JButton();
        barChartButton = new javax.swing.JButton();
        bubbleChartButton = new javax.swing.JButton();
        combinationChartButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        chartDescriptionLabel = new javax.swing.JLabel();

        jTabbedPane1.setName(""); // NOI18N

        areaChartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/web/knockout/rest/resources/area.png"))); // NOI18N
        chartButtonGroup.add(areaChartButton);
        areaChartButton.setName("Area Chart"); // NOI18N
        jTabbedPane1.addTab("Area", areaChartButton);

        barChartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/web/knockout/rest/resources/bar.png"))); // NOI18N
        chartButtonGroup.add(barChartButton);
        barChartButton.setName("Bar Chart"); // NOI18N
        jTabbedPane1.addTab("Bar", barChartButton);

        bubbleChartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/web/knockout/rest/resources/bubble.png"))); // NOI18N
        chartButtonGroup.add(bubbleChartButton);
        bubbleChartButton.setName("Bubble Chart"); // NOI18N
        jTabbedPane1.addTab("Chart", bubbleChartButton);

        combinationChartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/web/knockout/rest/resources/combination.png"))); // NOI18N
        chartButtonGroup.add(combinationChartButton);
        combinationChartButton.setName("Combination Chart"); // NOI18N
        jTabbedPane1.addTab("Combination", combinationChartButton);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));
        jPanel1.setName("Area Chart"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chartDescriptionLabel)
                .addContainerGap(331, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chartDescriptionLabel)
                .addContainerGap(357, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(ChartPanelVisual.class, "LBL_RestSource")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton areaChartButton;
    private javax.swing.JButton barChartButton;
    private javax.swing.JButton bubbleChartButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup chartButtonGroup;
    private javax.swing.JLabel chartDescriptionLabel;
    private javax.swing.JButton combinationChartButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    void store(WizardDescriptor descriptor) {
        descriptor.putProperty(ChartPanel.EXISTED_BACKBONE, myBackbone);
        descriptor.putProperty(ChartPanel.EXISTED_UNDERSCORE, myUnderscore);
        descriptor.putProperty(ChartPanel.EXISTED_JQUERY, myJQuery);
    }

    void read(WizardDescriptor wizardDescriptor) {
        myBackbone = null;
        Object fileName = wizardDescriptor.getProperty(ChartPanel.FILE_NAME);
        String jsName = null;
        if (fileName == null) {
            jsName = suggestJsName(wizardDescriptor);
        } else {
            jsName = fileName.toString();
        }

        Templates.setTargetName(wizardDescriptor, jsName);
    }

    private String suggestJsName(WizardDescriptor descriptor) {
        FileObject targetFolder = Templates.getTargetFolder(descriptor);

        String suggestName = REST_CLIENT;
        if (targetFolder == null) {
            return suggestName;
        }
        FileObject restClient = null;
        int count = 0;
        String result = null;
        while (true) {
            restClient = targetFolder.getFileObject(suggestName + JS);
            if (restClient == null) {
                result = suggestName;
                break;
            } else {
                count++;
                suggestName = REST_CLIENT + count;
            }
        }
        return result;
    }

    boolean valid(final WizardDescriptor wizardDescriptor) {
        if (wizardDescriptor == null) {
            return true;
        }
        wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, null);
        if (getRestNode() == null) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    NbBundle.getMessage(ChartPanelVisual.class, "ERR_NoRestResource"));    // NOI18N
            return false;
        }
        String targetName = Templates.getTargetName(wizardDescriptor);
        FileObject targetFolder = Templates.getTargetFolder(wizardDescriptor);
        if (targetFolder != null && targetFolder.getFileObject(targetName) != null) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    NbBundle.getMessage(ChartPanelVisual.class, "ERR_ExistedFile", targetName));    // NOI18N
            return false;
        }
        return true;
    }

    Node getRestNode() {
        return myRestNode;
    }

    private ChartPanel myPanel;
    private Node myRestNode;
    private FileObject myBackbone;
    private FileObject myUnderscore;
    private FileObject myJQuery;

}
